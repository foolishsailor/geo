{"version":3,"sources":["webpack://geo/webpack/universalModuleDefinition","webpack://geo/webpack/bootstrap","webpack://geo/(webpack)/buildin/module.js","webpack://geo/./src/bearings.js","webpack://geo/./src/const.js","webpack://geo/./src/index.js","webpack://geo/./src/prototypes.js","webpack://geo/./src/validateData/parseDMS.js","webpack://geo/./src/validateData/validation.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;QCVA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;;;;;;;;;;;ACrBA;AACA;AACA;AACA,CAAC,GAAG,mBAAO,CAAC,mEAA2B;;AAEvC;AACA,SAAS;AACT;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,MAAM;AACnB,eAAe;AACf,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;;AAEA,YAAY,OAAO;AACnB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,YAAY,OAAO;AACnB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,YAAY,OAAO;AACnB,aAAa,e;;AAEb;AACA;AACA;AACA;;AA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CtB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,eAAe,KAAK;AACpB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA,cAAc,OAAO;AACrB,mBAAmB,MAAM;AACzB,mBAAmB,OAAO;;AAE1B,gBAAgB;AAChB,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP,YAAY;AACZ;;AAEA;AACA;AACA;AACA,qBAAqB,sBAAsB;AAC3C;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,WAAW,MAAM;AACjB,WAAW,OAAO;;AAElB;;AAEA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,gCAAgC;AAChC;;AAEA;;AAEA,yCAAyC;;AAEzC;;AAEA;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA,4DAA4D,SAAS;AACrE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gFAAgF;;AAEhF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,YAAY;;AAE/B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;ACjfD,OAAO,WAAW,GAAG,mBAAO,CAAC,mEAA2B;;AAExD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY,IAAI,QAAQ,IAAI,QAAQ,IAAI;AACxC;;AAEA;AACA;AACA,wDAAwD;AACxD;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,gEAAgE;;AAEhE;AACA,qCAAqC;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA,gEAAgE;AAChE;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;ACpEA,mBAAO,CAAC,0CAAe;AACvB,iBAAiB,mBAAO,CAAC,kDAAY;;AAErC;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB;AACA,YAAY,MAAM;AAClB,YAAY,OAAO;AACnB,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA,OAAO;AACP,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,YAAY,OAAO;AACnB,WAAW,OAAO;AAClB,YAAY,MAAM;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,mBAAmB,sBAAsB;AACzC;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,GAAG;AACH,WAAW;AACX;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,MAAM;AACjB,aAAa,cAAc;AAC3B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"geo.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"geo\"] = factory();\n\telse\n\t\troot[\"geo\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","const {\r\n  validateBearings,\r\n  processPointData,\r\n} = require(\"./validateData/validation\");\r\n\r\nconst handleError = (message) => {\r\n  throw { error: \"Invalid Bearings\", message };\r\n};\r\n\r\nmodule.exports = {\r\n  /*------------------------------------------\r\n\r\n        COMPASS HEADING AND ANGLE FUNCTIONS\r\n\r\n    -------------------------------------------*/\r\n  /**\r\n   * getAvgOfBearings\r\n   *\r\n   * Return average of all elements in array normalized for compass bearings.\r\n   * Numbers must be converted to radians and then compared\r\n   *\r\n   * @param {array} bearings - array of bearing values\r\n   * @returns {object}\r\n   * @param {number} degrees - the average of bearings in degrees\r\n   * @param {number} radians - the average of bearings in radians -\r\n   *\r\n   * Legitimate values are between 0 and 360 - not inclusive of 360, i.e. 359.99999\r\n   */\r\n  getAvgOfBearings: (bearings) => {\r\n    try {\r\n      if (bearings.length < 2) throw handleError(\"Less than two bearings\");\r\n\r\n      //check for malformed data\r\n      let checkBearings = validateBearings(bearings);\r\n      if (checkBearings.length > 0) throw checkBearings;\r\n\r\n      let values = bearings.reduce(\r\n        function (a, c) {\r\n          return {\r\n            sinValue: (a.sinValue += Math.sin(c.toRad())),\r\n            cosValue: (a.cosValue += Math.cos(c.toRad())),\r\n          };\r\n        },\r\n        { sinValue: 0, cosValue: 0 }\r\n      );\r\n\r\n      let bearingInRad = Math.atan2(values.sinValue, values.cosValue);\r\n      let bearingInDeg = bearingInRad.toDeg();\r\n\r\n      if (bearingInDeg <= -1) bearingInDeg += 359;\r\n\r\n      return {\r\n        degrees: Math.abs(Math.round(bearingInDeg * 100) / 100),\r\n        radians: bearingInRad,\r\n      };\r\n    } catch (err) {\r\n      handleError(err);\r\n    }\r\n  },\r\n\r\n  /**\r\n    getBearingBetweenTwoPoints\r\n\r\n    Calculate bearing between two positions\r\n\r\n    @param {object} start - GPS position\r\n      @param {number} start.lat\r\n      @param {number} start.lon\r\n    @param {object} end - GPS position\r\n      @param {number} end.lat\r\n      @param {number} end.lon\r\n    @param {number} decimal - number decimal places, default 0\r\n    @return {Number | Error} \r\n\r\n  */\r\n  getBearingBetweenTwoPoints: (start, end, decimal = 0) => {\r\n    try {\r\n      const [startClean, endClean] = processPointData([start, end]);\r\n\r\n      let startLat = startClean.lat.toRad();\r\n      let endLat = endClean.lat.toRad();\r\n      let lonDiff = (endClean.lon - startClean.lon).toRad();\r\n\r\n      let y = Math.sin(lonDiff) * Math.cos(endLat);\r\n      let x =\r\n        Math.cos(startLat) * Math.sin(endLat) -\r\n        Math.sin(startLat) * Math.cos(endLat) * Math.cos(lonDiff);\r\n\r\n      return ((Math.atan2(y, x).toDeg() + 360) % 360).toFixedNumber(decimal);\r\n    } catch (err) {\r\n      throw err;\r\n    }\r\n  },\r\n\r\n  /**\r\n    getBearingDiff\r\n\r\n    Calculate normalized difference between two bearings.  This return the smallest arc of\r\n    two possible as use case for this will always be the smaller of two arcs\r\n\r\n    @param {number} bearing1\r\n    @param {number} bearing2\r\n\r\n    @return {number}\r\n\r\n  */\r\n  getBearingDiff: (bearing1, bearing2) => {\r\n    if (bearing1 >= 360 || bearing1 < 0 || bearing2 >= 360 || bearing2 < 0)\r\n      handleError(\"Out of bounds\");\r\n\r\n    return Math.min(\r\n      bearing1 - bearing2 < 0 ? bearing1 - bearing2 + 360 : bearing1 - bearing2,\r\n      bearing2 - bearing1 < 0 ? bearing2 - bearing1 + 360 : bearing2 - bearing1\r\n    );\r\n  },\r\n\r\n  /**\r\n    addHeading\r\n\r\n    Adds and normalizes two bearings\r\n\r\n    @param {number} baseHdg\r\n    @param {number} addDegrees\r\n\r\n    @return {number} new bearing\r\n\r\n  */\r\n  addHeading: (baseHdg, addDegrees) => {\r\n    hdg = baseHdg + addDegrees;\r\n    if (hdg < 0) {\r\n      hdg += 360;\r\n    }\r\n    if (hdg >= 360) {\r\n      hdg -= 360;\r\n    }\r\n\r\n    return hdg;\r\n  },\r\n\r\n  /**\r\n    invertHDG\r\n\r\n    Inverts and normalizes heading\r\n\r\n    @param {number} hdg\r\n    @return {number} new bearing\r\n\r\n  */\r\n  invertHDG: (hdg) => {\r\n    hdg += 180; //quadrant orientaion\r\n    if (hdg < 0) {\r\n      hdg += 360;\r\n    }\r\n    if (hdg >= 360) {\r\n      hdg -= 360;\r\n    }\r\n\r\n    return hdg;\r\n  },\r\n\r\n  /**\r\n    findMiddleAngle\r\n\r\n    Calculates difference in two bearings and returns median bearing between those two bearings\r\n    Effectively finds the smaller of the two angles of a cricle and returns the median angle\r\n\r\n    @param {number} startAngle\r\n    @param {number} endAngle\r\n\r\n    @return {number} median bearing\r\n\r\n  */\r\n  findMiddleAngle: (startAngle, endAngle) => {\r\n    startAngle = Math.round(startAngle);\r\n    endAngle = Math.round(endAngle);\r\n\r\n    let bearingdiff = this.getBearingDiff(startAngle, endAngle);\r\n\r\n    if (this.addHeading(startAngle, bearingdiff) == endAngle) {\r\n      return this.addHeading(startAngle, bearingdiff / 2);\r\n    } else {\r\n      return this.addHeading(startAngle, (bearingdiff * -1) / 2);\r\n    }\r\n  },\r\n};\r\n","const geo_const = {\r\n  KM_TO_NM: 0.539957,\r\n  NM_TO_KM: 1.852,\r\n  HOUR: 3600,\r\n  KM_IN_DEG: 111.12,\r\n  NM_IN_DEG: 60,\r\n  NM_TO_FEET: 6076,\r\n  KM_TO_FEET: 3280.84,\r\n  RADIUS_IN_M: 6378137, //radius earth at equator\r\n  MEAN_RADIUS_IN_M: 6371000, //earth mean radius\r\n};\r\n\r\nmodule.exports = { geo_const };\r\n","require(\"./prototypes\");\n\nconst { geo_const } = require(\"./const\");\nconst { parseDMS } = require(\"./validateData/validation\");\nconst bearings = require(\"./bearings\");\n\nmodule.exports = (() => {\n  /**\n   * getBoundsOfData\n   *\n   * Takes an array of geoJSON objects and returns a boundary box containeing those values\n   * @param {array} data array of geoJSON object\n   * @param {object} geoJSON\n   * @property {number} lat\n   * @property {number} lon\n   *\n   * @returns {object} Return object has four cornes of bounds of data set\n   * @property {latMin} latMin\n   * @property {latMax} latMax\n   * @property {lonMin}\n   * @property {lonMax}\n   */\n  const getBoundsOfData = (data) => {\n    const boundsObject = data.reduce(\n      function (a, c) {\n        return {\n          latMin: isNaN(a.latMin) || a.latMin > c.lat ? c.lat : a.latMin,\n          latMax: isNaN(a.latMax) || a.latMax < c.lat ? c.lat : a.latMax,\n          lngMin: isNaN(a.lngMin) || a.lngMin > c.lng ? c.lng : a.lngMin,\n          lngMax: isNaN(a.lngMax) || a.lngMax < c.lng ? c.lng : a.lngMax,\n        };\n      },\n      {\n        latMin: Infinity,\n        latMax: -Infinity,\n        lngMin: Infinity,\n        lngMax: -Infinity,\n      }\n    );\n  };\n\n  /*-------------------------------------------------------\n\n    DISTANCE FUNCTIONS\n\n  --------------------------------------------------------*/\n\n  /**\n    getDistanceCos\n\n    Calculate distance between two points in km.  This method generates more accurate distance for points close together\n    like within a tunr or on a race course\n\n    @param {object} from - GPS position\n      @property {number} lat\n      @property {number} lon\n    @param {object} to - GPS position\n      @property {number} lat\n      @property {number} lon\n    @return {Number} - km [default]\n\n  */\n  const getDistanceCos = (from, to, radius) => {\n    let R = radius || geo_const.MEAN_RADIUS_IN_M / 1000; //default to earth radius in km\n\n    let d =\n      Math.acos(\n        Math.sin((from.lat * Math.PI) / 180) *\n          Math.sin((to.lat * Math.PI) / 180) +\n          Math.cos((from.lat * Math.PI) / 180) *\n            Math.cos((to.lat * Math.PI) / 180) *\n            Math.cos(((to.lon - from.lon) * Math.PI) / 180)\n      ) * R;\n    return d;\n  };\n\n  /**\n    getDistanceHaversine\n\n    Calculate distance between two points.  This method generates more accurate distance for points farther apart\n    and incorporates the curve of the earth as part of the equation\n\n    @param {object} from - GPS position\n      @property {number} lat\n      @property {number} lon\n    @param {object} to - GPS position\n      @property {number} lat\n      @property {number} lon\n    @return {Number}\n\n  */\n  const getDistanceHaversine = (from, to) => {\n    let R = geo_const.MEAN_RADIUS_IN_M / 1000; // earth's mean radius in km\n    let dLat = ((to.lat - from.lat) * Math.PI) / 180;\n    let dLon = ((to.lon - from.lon) * Math.PI) / 180;\n    from.lat = (from.lat * Math.PI) / 180;\n    to.lat = (to.lat * Math.PI) / 180;\n\n    let a =\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n      Math.cos(from.lat) *\n        Math.cos(to.lat) *\n        Math.sin(dLon / 2) *\n        Math.sin(dLon / 2);\n    let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    let d = R * c;\n    return d;\n  };\n\n  /**\n   * getDistanceFromSpeedTime\n   *\n   * Calculate distance from speed (in kM/hour) and Time (seconds)\n   *\n   * @param {number} speed - speed in kM/hr\n   * @param {number} time - time in Seconds\n   * @return {object}\n   *      @property {number} distInDegree\n   *      @property {number} distInFeet\n   *      @property {number} distInKilometers\n   *\n   * */\n\n  const getDistanceFromSpeedTime = (speed, time) => {\n    return {\n      distInDegree: (speed * (time / geo_const.HOUR)) / geo_const.KM_IN_DEG,\n      distInFeet: speed * (time / geo_const.HOUR) * geo_const.KM_TO_FEET,\n      distInKilometers: speed * (time / geo_const.HOUR),\n      distInNM: speed * (time / geo_const.HOUR) * geo_const.KM_TO_NM,\n    };\n  };\n\n  /**\n    getPostionFromBearingAndDistance\n\n    Calculate lat and lon point from existing point, bearing and distance.  Inputs in KM\n\n    @param {object} arrs -\n      @property {object} waypoint\n      @property {number} distance in km\n      @property {number} bearing\n\n    @return {object}\n      @property {number} lat - lat derived\n      @property {number} lng - lon derived\n\n  */\n\n  const getPostionFromBearingAndDistance = (waypoint, distance, bearing) => {\n    let position = {\n      lat: waypoint.lat(),\n      lng: waypoint.lng(),\n    };\n\n    dist = distance / geo_const.MEAN_RADIUS_IN_M / 1000;\n\n    let brng = (Number(bearing) * Math.PI) / 180;\n    let lat1 = position.lat;\n    lat1 = (lat1 * Math.PI) / 180;\n    let lon1 = position.lng;\n    lon1 = (lon1 * Math.PI) / 180;\n\n    let lat2 = Math.asin(\n      Math.sin(lat1) * Math.cos(dist) +\n        Math.cos(lat1) * Math.sin(dist) * Math.cos(brng)\n    );\n\n    let lon2 =\n      lon1 +\n      Math.atan2(\n        Math.sin(brng) * Math.sin(dist) * Math.cos(lat1),\n        Math.cos(dist) - Math.sin(lat1) * Math.sin(lat2)\n      );\n\n    return {\n      lat: (lat2 * 180) / Math.PI,\n      lng: (lon2 * 180) / Math.PI,\n    };\n  };\n\n  /**\n    getIntersection\n\n    Calculate intersection point between two lines/routes in lat and lon.  They are not required to overlap to calulate\n\n   \n      @property {object} lineA\n        @property {number} lat\n        @property {number} lon\n\n      @property {object} lineB\n        @property {number} lat\n        @property {number} lon\n\n\n    @return {object}\n      @property {number} lat\n      @property {number} lon\n\n  */\n  const getIntersection = ({ lineA, lineB }) => {\n    let XAsum = lineA.start.lon - lineA.end.lon;\n    let XBsum = lineB.start.lon - lineB.end.lon;\n    let YAsum = lineA.start.lat - lineA.end.lat;\n    let YBsum = lineB.start.lat - lineB.end.lat;\n\n    let lineDenominator = XAsum * YBsum - YAsum * XBsum;\n    if (lineDenominator == 0.0) return false;\n\n    let a =\n      lineA.start.lon * lineA.end.lat - arrs.lineA.start.lat * lineA.end.lon;\n    let b = lineB.start.lon * lineB.end.lat - lineB.start.lat * lineB.end.lon;\n\n    let lat = (a * YBsum - b * YAsum) / lineDenominator;\n    let lon = (a * XBsum - b * XAsum) / lineDenominator;\n\n    return { lat, lon };\n  };\n\n  /**\n   * Returns (signed) distance from ‘this’ point to great circle defined by start-point and end-point.\n   *\n   * @param   {object} lineStart - Start point of great circle path.\n       @param {number} lat\n       @param {number} lon\n   * @param   {object} lineEnd - End point of great circle path.\n       @param {number} lat\n       @param {number} lon\n     @param   {object} currentPoint -current location\n         @param {number} lat\n         @param {number} lon\n   * @param   {bool} haversine - use haversine versus cosine calculation.  Cos is best for smalelr distances \n   * @returns {number} Distance to great circle (-ve if to left, +ve if to right of path).\n   *    *    \n   */\n  function crossTrackDistanceTo({\n    lineStart,\n    lineEnd,\n    currentPoint,\n    haversine = false,\n  }) {\n    let lineLength = haversine\n      ? this.getDistanceHaversine(\n          lineStart,\n          currentPoint,\n          geo_const.MEAN_RADIUS_IN_M\n        ) / geo_const.MEAN_RADIUS_IN_M\n      : this.getDistanceCos(\n          lineStart,\n          currentPoint,\n          geo_const.MEAN_RADIUS_IN_M\n        ) / geo_const.MEAN_RADIUS_IN_M;\n\n    let startToCurrent =\n      this.getBearingBetweenTwoPoints(lineStart, currentPoint) *\n      (Math.PI / 180);\n\n    let startLineBearing =\n      this.getBearingBetweenTwoPoints(lineStart, lineEnd) * (Math.PI / 180);\n\n    let XTE = Math.asin(\n      Math.sin(lineLength) * Math.sin(startToCurrent - startLineBearing)\n    );\n\n    return XTE * geo_const.MEAN_RADIUS_IN_M;\n  }\n\n  /*------------------------------------------\n\n        AVERAGING and AGGREGATING FUNCTIONS\n\n    -------------------------------------------*/\n\n  /**\n      Get min, max, avg of a given property from array and filters out non numbers or bad data\n\n      @param {object} arrs\n        @property {array} array - Array of racedata objects to get min,max, avg from\n        @property {object} dataSource - propery of racedata object to use as basis for reducing array\n\n      @returns {object}\n        @property {number} max\n        @property {number} min\n        @property {number} avg\n\n    */\n  const getMinMaxAvgFromArray = (newArray) => {\n    //strips out bad data\n    let max = newArray.reduce(function (a, b) {\n      if (isNaN(a) || a === null || a === \"\") a = -Infinity;\n      if (isNaN(b) || b === null || b === \"\") b = -Infinity;\n      return Math.max(a, b);\n    }, -Infinity);\n\n    let min = newArray.reduce(function (a, b) {\n      if (isNaN(a) || a === null || a === \"\") a = Infinity;\n      if (isNaN(b) || b === null || b === \"\") b = Infinity;\n      return Math.min(a, b);\n    }, Infinity);\n\n    let avg =\n      newArray.reduce(function (previous, current) {\n        if (isNaN(current) || current === null || current === \"\")\n          return previous;\n        return previous + Number(current);\n      }, 0) / newArray.length;\n\n    return { min, max, avg };\n  };\n\n  /**\n   * Convert lat/lon to mercator projection points\n   */\n  const mercator = ({ latitude, longitude }) => {\n    const MAX = 85.0511287798;\n    const RADIANS = Math.PI / 180;\n    let point = {};\n\n    point.lon = geo_const.RADIUS_IN_M * longitude * RADIANS;\n    point.lat = Math.max(Math.min(MAX, latitude), -MAX) * RADIANS;\n    point.lat =\n      geo_const.RADIUS_IN_M * Math.log(Math.tan(Math.PI / 4 + point.lat / 2));\n\n    return point;\n  };\n\n  /*-----------------------------------------------\n\n    TIME FUNCTIONS\n\n---------------------------------------------------*/\n\n  /**\n   * humanTime\n   *\n   * Produce human readable time from milliseconds.  Automatically hide/add mins secs days etc\n   *\n   */\n  const humanTime = (millisec) => {\n    let seconds = (millisec / 1000).toFixed(0);\n    let minutes = Math.floor(seconds / 60);\n    let hours = \"\";\n    if (minutes > 59) {\n      hours = Math.floor(minutes / 60);\n      hours = hours >= 10 ? hours : \"0\" + hours;\n      minutes = minutes - hours * 60;\n      minutes = minutes >= 10 ? minutes : \"0\" + minutes;\n    }\n\n    seconds = Math.floor(seconds % 60);\n    seconds = seconds >= 10 ? seconds : \"0\" + seconds;\n    if (hours != \"\") {\n      return hours + \":\" + minutes + \":\" + seconds;\n    }\n    return minutes + \":\" + seconds;\n  };\n\n  /*-----------------------------------------------------------------\n\n    LINE OR COURSE SMOOTHING ALGORYTHMS\n\n  ------------------------------------------------------------------*/\n  /**\n  GDouglasPeucker\n  Stack-based Douglas Peucker line simplification routine\n   returned is a reduced google.maps.LatLng array\n   After code by  Dr. Gary J. Robinson,\n   Environmental Systems Science Centre,\n   University of Reading, Reading, UK\n\n   @param {array} source Input coordinates\n   @param {number} kink in metres, kinks above this depth kept.  Kink depth is the height of the triangle abc where a-b and b-c are two consecutive line segments\n\n*/\n\n  function GDP_smoother(source, kink) {\n    let n_source, n_stack, n_dest, start, end, i, sig;\n    let dev_sqr, max_dev_sqr, band_sqr;\n    let x12, y12, d12, x13, y13, d13, x23, y23, d23;\n    let F = (Math.PI / 180.0) * 0.5;\n    let index = new Array(); /* aray of indexes of source points to include in the reduced line */\n    let sig_start = new Array(); /* indices of start & end of working section */\n    let sig_end = new Array();\n\n    /* check for simple cases */\n\n    if (source.length < 3) return source; /* one or two points */\n\n    /* more complex case. initialize stack */\n\n    n_source = source.length;\n    band_sqr =\n      (kink * 360.0) / (2.0 * Math.PI * 6378137.0); /* Now in degrees */\n    band_sqr *= band_sqr;\n    n_dest = 0;\n    sig_start[0] = 0;\n    sig_end[0] = n_source - 1;\n    n_stack = 1;\n\n    /* while the stack is not empty  ... */\n    while (n_stack > 0) {\n      /* ... pop the top-most entries off the stacks */\n\n      start = sig_start[n_stack - 1];\n      end = sig_end[n_stack - 1];\n      n_stack--;\n\n      if (end - start > 1) {\n        /* any intermediate points ? */\n\n        /* ... yes, so find most deviant intermediate point to\n                       either side of line joining start & end points */\n\n        x12 = source[end].lon - source[start].lon;\n        y12 = source[end].lat - source[start].lat;\n        if (Math.abs(x12) > 180.0) x12 = 360.0 - Math.abs(x12);\n        x12 *= Math.cos(\n          F * (source[end].lat + source[start].lat)\n        ); /* use avg lat to reduce lon */\n        d12 = x12 * x12 + y12 * y12;\n\n        for (i = start + 1, sig = start, max_dev_sqr = -1.0; i < end; i++) {\n          x13 = source[i].lon - source[start].lon;\n          y13 = source[i].lat - source[start].lat;\n          if (Math.abs(x13) > 180.0) x13 = 360.0 - Math.abs(x13);\n          x13 *= Math.cos(F * (source[i].lat + source[start].lat));\n          d13 = x13 * x13 + y13 * y13;\n\n          x23 = source[i].lon - source[end].lon;\n          y23 = source[i].lat - source[end].lat;\n          if (Math.abs(x23) > 180.0) x23 = 360.0 - Math.abs(x23);\n          x23 *= Math.cos(F * (source[i].lat + source[end].lat));\n          d23 = x23 * x23 + y23 * y23;\n\n          if (d13 >= d12 + d23) dev_sqr = d23;\n          else if (d23 >= d12 + d13) dev_sqr = d13;\n          else\n            dev_sqr = ((x13 * y12 - y13 * x12) * (x13 * y12 - y13 * x12)) / d12; // solve triangle\n\n          if (dev_sqr > max_dev_sqr) {\n            sig = i;\n            max_dev_sqr = dev_sqr;\n          }\n        }\n\n        if (max_dev_sqr < band_sqr) {\n          /* is there a sig. intermediate point ? */\n          /* ... no, so transfer current start point */\n          index[n_dest] = start;\n          n_dest++;\n        } else {\n          /* ... yes, so push two sub-sections on stack for further processing */\n          n_stack++;\n          sig_start[n_stack - 1] = sig;\n          sig_end[n_stack - 1] = end;\n          n_stack++;\n          sig_start[n_stack - 1] = start;\n          sig_end[n_stack - 1] = sig;\n        }\n      } else {\n        /* ... no intermediate points, so transfer current start point */\n        index[n_dest] = start;\n        n_dest++;\n      }\n    }\n\n    /* transfer last point */\n    index[n_dest] = n_source - 1;\n    n_dest++;\n\n    /* make return array */\n    let r = new Array();\n    for (let i = 0; i < n_dest; i++) r.push(source[index[i]]);\n\n    return r;\n  }\n\n  return {\n    getAvgOfBearings: bearings.getAvgOfBearings,\n    getBearingBetweenTwoPoints: bearings.getBearingBetweenTwoPoints,\n    getBearingDiff: bearings.getBearingDiff,\n    addHeading: bearings.addHeading,\n    invertHDG: bearings.invertHDG,\n    findMiddleAngle: bearings.findMiddleAngle,\n    parseDMS: bearings.parseDMS,\n    getBoundsOfData,\n    getDistanceCos,\n    getDistanceHaversine,\n    getDistanceFromSpeedTime,\n    getPostionFromBearingAndDistance,\n    getIntersection,\n    crossTrackDistanceTo,\n    getMinMaxAvgFromArray,\n    mercator,\n    humanTime,\n    GDP_smoother,\n  };\n})();\n","const { parseDMS } = require(\"./validateData/validation\");\r\n\r\nNumber.prototype.toFixedNumber = function (digits, base) {\r\n  var pow = Math.pow(base || 10, digits);\r\n  return Math.round(this * pow) / pow;\r\n};\r\n\r\n// convert degrees to radians\r\nNumber.prototype.toRad = function () {\r\n  return (this * Math.PI) / 180;\r\n};\r\n\r\n// convert radians to degrees (signed)\r\nNumber.prototype.toDeg = function () {\r\n  return (this * 180) / Math.PI;\r\n};\r\n\r\n// convert radians to degrees (as bearing: 0...359)\r\nNumber.prototype.toBNG = function () {\r\n  return (this.toDeg() + 360) % 360;\r\n};\r\n\r\n// convert numeric degrees to human readable deg/min/sec - i.e. 41.34445 = 041°20'40\"\r\nNumber.prototype.toDMS = function () {\r\n  let decimal = Math.abs(this);\r\n  decimal += 1 / 7200; // add to second for rounding\r\n  let deg = Math.floor(decimal);\r\n  let min = Math.floor((decimal - deg) * 60);\r\n  let sec = Number(((decimal - deg - min / 60) * 3600).toFixed(2));\r\n\r\n  // add leading zeros if required\r\n  if (deg < 100) deg = \"0\" + deg;\r\n  if (deg < 10) deg = \"0\" + deg;\r\n  if (min < 10) min = \"0\" + min;\r\n  if (sec < 10) sec = \"0\" + sec;\r\n  return `${deg}\\u00B0${min}\\u0027${sec}\\u0022`;\r\n};\r\n\r\nNumber.prototype.toLat = function () {\r\n  // convert numeric degrees to deg/min/sec latitude\r\n  return this.toDMS().slice(1) + (this < 0 ? \"S\" : \"N\"); // knock off initial '0' for lat\r\n};\r\n\r\nNumber.prototype.toLon = function () {\r\n  // convert numeric degrees to deg/min/sec longitude\r\n  return this.toDMS() + (this > 0 ? \"E\" : \"W\");\r\n};\r\n\r\n/**\r\n * Parses human readable DMS string into Decimal format\r\n *\r\n * See: /validation/parseDMS for attribution nad info *\r\n */\r\n\r\nString.prototype.parseDMS = function () {\r\n  return parseDMS(this);\r\n};\r\n","/**parseDMS\r\n * Adapted from Chris Veness\r\n * http://www.movable-type.co.uk/scripts/latlong.htmlarses\r\n *\r\n * Parses human readable DMS string into Decimal format\r\n *\r\n * Parses a wide range of styles\r\n * ut since it is usd to process data is very strict on illegal characters\r\n * to ensure a malformed piece of data is not parsed into an incorrect position\r\n */\r\n\r\nconst parseDMS = (position, options) => {\r\n  //Check for any illegal characters\r\n  if (/[^0-9.,NSEW\\-\\s\\u00B0\\'\\\"]/i.test(position))\r\n    throw \"Malformed Position Data\";\r\n\r\n  //Check position is already a decimal\r\n  if (!isNaN(parseFloat(position)) && isFinite(position))\r\n    return Number(position);\r\n\r\n  let deg;\r\n  let degLL = position.replace(/^-/, \"\").replace(/[NSEW]/i, \"\"); // strip off any sign or compass dir'n\r\n\r\n  console.log(\"degll\", degLL);\r\n  let dms = degLL.split(/[^0-9.,]+/); // split out separate d/m/s\r\n\r\n  try {\r\n    //If find '' anywhere but at end of array then malformed data exists so throw error\r\n    dms.forEach((e, i) => {\r\n      if (e == \"\") {\r\n        if (i < dms.length - 1) {\r\n          throw \"Malformed Position Data\";\r\n        }\r\n        dms.splice(i, 1);\r\n      }\r\n    });\r\n\r\n    validateDMSstring(position, dms);\r\n\r\n    switch (\r\n      dms.length // convert to decimal degrees...\r\n    ) {\r\n      case 3: // interpret 3-part result as d/m/s\r\n        deg = dms[0] / 1 + dms[1] / 60 + dms[2] / 3600;\r\n        break;\r\n      case 2: // interpret 2-part result as d/m\r\n        deg = dms[0] / 1 + dms[1] / 60;\r\n        break;\r\n      case 1: // decimal or non-separated dddmmss\r\n        if (/[NS]/i.test(position)) degLL = \"0\" + degLL; // - normalise N/S to 3-digit degrees\r\n        deg =\r\n          dms[0].slice(0, 3) / 1 +\r\n          dms[0].slice(3, 5) / 60 +\r\n          dms[0].slice(5) / 3600;\r\n        break;\r\n      default:\r\n        throw \"Malformed Position Data\";\r\n    }\r\n  } catch (err) {\r\n    throw err;\r\n  }\r\n\r\n  if (/^-/.test(position) || /[WS]/i.test(position)) deg = -deg; // take '-', west and south as -ve\r\n  return deg.toFixedNumber(7);\r\n};\r\n\r\nmodule.export = {\r\n  parseDMS,\r\n};\r\n","require(\"../prototypes\");\r\nconst parseDMS = require(\"./parseDMS\");\r\n\r\n/**\r\n * Inspects array of bearings and returns array of items that are not valid bearing values.\r\n * If all values are valid then returns an array with length 0\r\n * @param {array} bearings\r\n * @param {bool} allowString - bool that determeins is a string that parses to a number is allowed.  Default - false\r\n *\r\n * @return {array} - If there are bad bearings then returns array of objects that containe the index and value\r\n *  @param {number} index - Index of bad item\r\n *  @param {!number} value - Any value that does not parse to a number\r\n */\r\nvalidateBearings = (bearings, allowString) => {\r\n  let results = [];\r\n  bearings.forEach(function (bearing, i) {\r\n    if (isNaN(bearing) || bearing >= 360 || bearing < 0 || bearing === null)\r\n      return results.push({\r\n        index: i,\r\n        value: bearing,\r\n      });\r\n\r\n    if (!allowString && typeof bearing === \"string\")\r\n      results.push({\r\n        index: i,\r\n        value: bearing,\r\n      });\r\n  });\r\n\r\n  return results;\r\n};\r\n\r\n/**\r\n * processPointData\r\n *\r\n * Checks all items in array for valid formated Position\r\n * @param {Object[]} positions - array of POsition Objects\r\n *  @param {Number} positions[].lat\r\n * @param {Number} positions[].lon\r\n * @return {Array} - Returns array of parsed data converted to DMS\r\n *\r\n */\r\nprocessPointData = (positions) => {\r\n  try {\r\n    //check if array\r\n    if (!Array.isArray(positions)) positions = new Array(positions);\r\n\r\n    let returnArray = [];\r\n\r\n    for (let i = 0; i < positions.length; i++) {\r\n      let point = positions[i];\r\n\r\n      //check if out of bounds\r\n      point.lat = parseDMS(point.lat);\r\n      if (Math.abs(point.lat) > 90) throw \"Latitude out of bounds\";\r\n\r\n      point.lon = parseDMS(point.lon);\r\n      if (Math.abs(point.lon) > 180) throw \"Longitude out of bounds\";\r\n\r\n      returnArray.push(point);\r\n    }\r\n\r\n    return returnArray;\r\n  } catch (err) {\r\n    throw { error: \"GPS Position Error\", message: err };\r\n  }\r\n};\r\n\r\n/**\r\n * testPositionStringRanges\r\n *\r\n * Checks parsed DMS array for any element out of bounds.  Uses regex\r\n * on original string to look for NS to see if item is Lat or Lon\r\n *\r\n * @param {string} dmsString - Original string position\r\n * @param {array} dmsArray - Array of parsed string into elements [Degrees, Minutes, Seconds]\r\n *  @return {null | Error } returns error if item out of bounds or malformed\r\n */\r\nvalidateDMSstring = (dmsString, dmsArray) => {\r\n  //check deg boundaries\r\n  if (Math.abs(dmsArray[0]) > 180) throw \"DMS degrees out of bounds\";\r\n\r\n  if (/[NS]/i.test(dmsString) && Math.abs(dmsArray[0]) > 90)\r\n    throw \"DMS degrees out of bounds\";\r\n\r\n  switch (\r\n    dmsArray.length // convert to decimal degrees...\r\n  ) {\r\n    case 3: // interpret 3-part result as d/m/s\r\n      if (dmsArray[1] > 60) throw \"DMS minutes out of bounds\";\r\n\r\n      if (dmsArray[2] > 60) throw \"DMS seconds out of bounds\";\r\n\r\n    case 2: // interpret 2-part result as d/m\r\n      if (dmsArray[1] > 60) throw \"DMS minutes out of bounds\";\r\n\r\n    default:\r\n      return;\r\n  }\r\n};\r\n\r\nmodule.exports = {\r\n  validateBearings,\r\n  processPointData,\r\n  validateDMSstring,\r\n  parseDMS,\r\n};\r\n"],"sourceRoot":""}