{"version":3,"sources":["webpack://geo/webpack/universalModuleDefinition","webpack://geo/webpack/bootstrap","webpack://geo/./src/bearings.js","webpack://geo/./src/distance.js","webpack://geo/./src/index.js","webpack://geo/./src/parseDMS/components/processDMS.js","webpack://geo/./src/parseDMS/components/processDMSstring.js","webpack://geo/./src/parseDMS/components/processPointObject.js","webpack://geo/./src/parseDMS/components/validateDMSString.js","webpack://geo/./src/parseDMS/index.js","webpack://geo/./src/position.js","webpack://geo/./src/surface/index.js","webpack://geo/./src/surface/surface_spherical.js","webpack://geo/./src/utils/arrayUtils.js","webpack://geo/./src/utils/compose.js","webpack://geo/./src/utils/const.js","webpack://geo/./src/utils/formatPoint.js","webpack://geo/./src/utils/measurement.js","webpack://geo/./src/utils/prototypes.js","webpack://geo/./src/utils/smoothing.js","webpack://geo/./src/utils/time.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;QCVA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;AClFA,iBAAiB,mBAAO,CAAC,2CAAY;AACrC,mBAAO,CAAC,qDAAoB;;AAE5B;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB;AACA,YAAY,MAAM;AAClB,YAAY,OAAO;AACnB,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA,OAAO;AACP,GAAG;;AAEH;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,MAAM;AACnB,eAAe;AACf,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;;AAEA,YAAY,OAAO;AACnB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,YAAY,OAAO;AACnB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,YAAY,OAAO;AACnB,aAAa,e;;AAEb;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,KAAK;AACL;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;;AAEA,YAAY,OAAO;AACnB,YAAY,OAAO;;AAEnB,aAAa;;AAEb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;;AAEA,YAAY,OAAO;AACnB,YAAY,OAAO;;AAEnB,aAAa,OAAO;;AAEpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;;AAEA;;AAEA,YAAY,OAAO;AACnB,aAAa,OAAO;;AAEpB;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;;AAEA,YAAY,OAAO;AACnB,YAAY,OAAO;;AAEnB,aAAa,OAAO;;AAEpB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;;;;;;;;;;;;ACrNA;AACA;;AAEA;AACA;;AAEA,YAAY,OAAO;AACnB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,YAAY,OAAO;AACnB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,aAAa,OAAO;;AAEpB;AACA;AACA,sDAAsD;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,YAAY,OAAO;AACnB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,YAAY,OAAO;AACnB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,aAAa;;AAEb;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY;AACZ,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,eAAe,KAAK;AACpB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACtIA,iBAAiB,mBAAO,CAAC,iDAAkB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,GAAG,mBAAO,CAAC,qCAAY;AACxB;AACA;AACA;AACA,CAAC,GAAG,mBAAO,CAAC,qDAAoB;AAChC;AACA;AACA;AACA;AACA;AACA,CAAC,GAAG,mBAAO,CAAC,qCAAY;AACxB;AACA;AACA;AACA;AACA,CAAC,GAAG,mBAAO,CAAC,qCAAY;AACxB,OAAO,YAAY,GAAG,mBAAO,CAAC,yCAAc;AAC5C,OAAO,eAAe,GAAG,mBAAO,CAAC,mDAAmB;;AAEpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;AChDD,0BAA0B,mBAAO,CAAC,2EAAqB;AACvD,yBAAyB,mBAAO,CAAC,yEAAoB;;AAErD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,4BAA4B;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA,kEAAkE;AAClE;AACA,GAAG;AACH,yCAAyC;AACzC;AACA;AACA;;AAEA;;;;;;;;;;;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;;;;;;;ACxBA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,SAAS,IAAI;AACb;AACA;;AAEA;;;;;;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,MAAM;AACjB,aAAa,cAAc;AAC3B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,2BAA2B,mBAAO,CAAC,wFAAiC;AACpE,mBAAmB,mBAAO,CAAC,wEAAyB;;AAEpD,mBAAO,CAAC,sDAAqB;;AAE7B;AACA;AACA,WAAW,wBAAwB;AACnC,YAAY,gBAAgB;AAC5B,YAAY,gBAAgB;AAC5B,WAAW,OAAO;AAClB,YAAY,KAAK;AACjB,YAAY,KAAK;AACjB,YAAY,KAAK;AACjB,YAAY,KAAK;AACjB,YAAY,KAAK;AACjB,+FAA+F;AAC/F;AACA;;AAEA,oCAAoC;AACpC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AC7DA,mBAAO,CAAC,qDAAoB;AAC5B,kBAAkB,mBAAO,CAAC,2CAAe;AACzC,gBAAgB,mBAAO,CAAC,yCAAW;AACnC,oBAAoB,mBAAO,CAAC,uDAAqB;AACjD,oBAAoB,mBAAO,CAAC,uDAAqB;AACjD,OAAO,OAAO,GAAG,mBAAO,CAAC,+CAAiB;;AAE1C;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA,YAAY;AACZ,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;;AAEA;AACA;;AAEA;;AAEA,iBAAiB,OAAO;AACxB,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;;AAE1B,iBAAiB,OAAO;AACxB,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;;;AAG1B,aAAa;AACb,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;;AAExB;AACA,+BAA+B,eAAe;AAC9C;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,UAAU;AACV;;AAEA;AACA;AACA;AACA,mBAAmB,sBAAsB;AACzC;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;ACxGA,kBAAkB,mBAAO,CAAC,+DAAqB;AAC/C,oBAAoB,mBAAO,CAAC,mEAAuB;AACnD,gBAAgB,mBAAO,CAAC,2DAAmB;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACbA,mBAAO,CAAC,sDAAqB;AAC7B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA,8BAA8B,2BAA2B;AACzD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB;;;;;;;;;;;;;;;;;;;;;;;AClClB;AACA;;AAEA,cAAc,OAAO;AACrB,mBAAmB,MAAM;AACzB,mBAAmB,OAAO;;AAE1B,gBAAgB;AAChB,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,KAAK;;AAEL,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB;AACA,aAAa,OAAO;AACpB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc;AACd,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB;;;;;;;;;;;;ACtElB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oDAAoD;;AAEpD;AACA;;AAEA;;AAEA,kBAAkB;;;;;;;;;;;;ACflB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;;;;;;;;;;;;ACvBA,kBAAkB,mBAAO,CAAC,qCAAS;;AAEnC,sBAAsB,oBAAoB;AAC1C;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,UAAU;AACV;;AAEA;;;;;;;;;;;;AC/BA,iBAAiB,mBAAO,CAAC,4CAAa;AACtC,kBAAkB,mBAAO,CAAC,qCAAS;;AAEnC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY,IAAI,QAAQ,IAAI,QAAQ,IAAI;AACxC;;AAEA;AACA;AACA,wDAAwD;AACxD;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,eAAe,QAAQ,qBAAqB;AACxD;;AAEA;AACA;AACA,YAAY,eAAe,QAAQ,qBAAqB;AACxD;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;AC/EA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,WAAW,MAAM;AACjB,WAAW,OAAO;;AAElB;;AAEA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,8BAA8B;AAC9B;;AAEA;;AAEA,uCAAuC;;AAEvC;;AAEA;AACA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;;AAEA,0DAA0D,SAAS;AACnE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,8EAA8E;;AAE9E;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,YAAY;;AAE7B;AACA;;AAEA,kBAAkB;;;;;;;;;;;;AClHlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB","file":"geo.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"geo\"] = factory();\n\telse\n\t\troot[\"geo\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","const parseDMS = require(\"./parseDMS\");\r\nrequire(\"./utils/prototypes\");\r\n\r\nconst handleError = (message) => {\r\n  throw { error: \"Invalid Bearings\", message };\r\n};\r\n\r\n/**\r\n * Inspects array of bearings and returns array of items that are not valid bearing values.\r\n * If all values are valid then returns an array with length 0\r\n * @param {array} bearings\r\n * @param {bool} allowString - bool that determeins is a string that parses to a number is allowed.  Default - false\r\n *\r\n * @return {array} - If there are bad bearings then returns array of objects that containe the index and value\r\n *  @param {number} index - Index of bad item\r\n *  @param {!number} value - Any value that does not parse to a number\r\n */\r\nconst validateBearings = (bearings, allowString) => {\r\n  let results = [];\r\n  bearings.forEach(function (bearing, i) {\r\n    if (isNaN(bearing) || bearing >= 360 || bearing < 0 || bearing === null)\r\n      return results.push({\r\n        index: i,\r\n        value: bearing,\r\n      });\r\n\r\n    if (!allowString && typeof bearing === \"string\")\r\n      results.push({\r\n        index: i,\r\n        value: bearing,\r\n      });\r\n  });\r\n\r\n  return results;\r\n};\r\n\r\nmodule.exports = {\r\n  /*------------------------------------------\r\n\r\n        COMPASS HEADING AND ANGLE FUNCTIONS\r\n\r\n    -------------------------------------------*/\r\n\r\n  validateBearings,\r\n  /**\r\n   * getAvgOfBearings\r\n   *\r\n   * Return average of all elements in array normalized for compass bearings.\r\n   * Numbers must be converted to radians and then compared\r\n   *\r\n   * @param {array} bearings - array of bearing values\r\n   * @returns {object}\r\n   * @param {number} degrees - the average of bearings in degrees\r\n   * @param {number} radians - the average of bearings in radians -\r\n   *\r\n   * Legitimate values are between 0 and 360 - not inclusive of 360, i.e. 359.99999\r\n   */\r\n  getAvgOfBearings: (bearings) => {\r\n    try {\r\n      if (bearings.length < 2) throw handleError(\"Less than two bearings\");\r\n\r\n      //check for malformed data\r\n      let checkBearings = validateBearings(bearings);\r\n      if (checkBearings.length > 0) throw checkBearings;\r\n\r\n      let values = bearings.reduce(\r\n        function (a, c) {\r\n          return {\r\n            sinValue: (a.sinValue += Math.sin(c.toRad())),\r\n            cosValue: (a.cosValue += Math.cos(c.toRad())),\r\n          };\r\n        },\r\n        { sinValue: 0, cosValue: 0 }\r\n      );\r\n\r\n      let bearingInRad = Math.atan2(values.sinValue, values.cosValue);\r\n      let bearingInDeg = bearingInRad.toDeg();\r\n\r\n      if (bearingInDeg <= -1) bearingInDeg += 359;\r\n\r\n      return {\r\n        degrees: Math.abs(Math.round(bearingInDeg * 100) / 100),\r\n        radians: bearingInRad,\r\n      };\r\n    } catch (err) {\r\n      handleError(err);\r\n    }\r\n  },\r\n\r\n  /**\r\n    getBearingBetweenTwoPoints\r\n\r\n    Calculate bearing between two positions\r\n\r\n    @param {object} start - GPS position\r\n      @param {number} start.lat\r\n      @param {number} start.lon\r\n    @param {object} end - GPS position\r\n      @param {number} end.lat\r\n      @param {number} end.lon\r\n    @param {number} decimal - number decimal places, default 0\r\n    @return {Number | Error} \r\n\r\n  */\r\n  getBngTwoPoints: (start, end, decimal = 0) => {\r\n    try {\r\n      const [startClean, endClean] = parseDMS([start, end]);\r\n\r\n      let startLat = startClean.lat.toRad();\r\n      let endLat = endClean.lat.toRad();\r\n      let lonDiff = (endClean.lon - startClean.lon).toRad();\r\n\r\n      let y = Math.sin(lonDiff) * Math.cos(endLat);\r\n      let x =\r\n        Math.cos(startLat) * Math.sin(endLat) -\r\n        Math.sin(startLat) * Math.cos(endLat) * Math.cos(lonDiff);\r\n\r\n      return ((Math.atan2(y, x).toDeg() + 360) % 360).toFixedNumber(decimal);\r\n    } catch (err) {\r\n      throw err;\r\n    }\r\n  },\r\n\r\n  /**\r\n    getBearingDiff\r\n\r\n    Calculate normalized difference between two bearings.  This return the smallest arc of\r\n    two possible as use case for this will always be the smaller of two arcs\r\n\r\n    @param {number} bearing1\r\n    @param {number} bearing2\r\n\r\n    @return {number}\r\n\r\n  */\r\n  getBngDiff: (bearing1, bearing2) => {\r\n    if (bearing1 >= 360 || bearing1 < 0 || bearing2 >= 360 || bearing2 < 0)\r\n      handleError(\"Out of bounds\");\r\n\r\n    return Math.min(\r\n      bearing1 - bearing2 < 0 ? bearing1 - bearing2 + 360 : bearing1 - bearing2,\r\n      bearing2 - bearing1 < 0 ? bearing2 - bearing1 + 360 : bearing2 - bearing1\r\n    );\r\n  },\r\n\r\n  /**\r\n    addHeading\r\n\r\n    Adds and normalizes two bearings\r\n\r\n    @param {number} baseHdg\r\n    @param {number} addDegrees\r\n\r\n    @return {number} new bearing\r\n\r\n  */\r\n  addHDG: (baseHdg, addDegrees) => {\r\n    hdg = baseHdg + addDegrees;\r\n    if (hdg < 0) {\r\n      hdg += 360;\r\n    }\r\n    if (hdg >= 360) {\r\n      hdg -= 360;\r\n    }\r\n\r\n    return hdg;\r\n  },\r\n\r\n  /**\r\n    invertHDG\r\n\r\n    Inverts and normalizes heading\r\n\r\n    @param {number} hdg\r\n    @return {number} new bearing\r\n\r\n  */\r\n  invertHDG: (hdg) => {\r\n    hdg += 180; //quadrant orientaion\r\n    if (hdg < 0) {\r\n      hdg += 360;\r\n    }\r\n    if (hdg >= 360) {\r\n      hdg -= 360;\r\n    }\r\n\r\n    return hdg;\r\n  },\r\n\r\n  /**\r\n    findMiddleAngle\r\n\r\n    Calculates difference in two bearings and returns middle bearing between those two bearings\r\n    Effectively finds the smaller of the two angles of a cricle and returns the middle angle\r\n\r\n    @param {number} startAngle\r\n    @param {number} endAngle\r\n\r\n    @return {number} median bearing\r\n\r\n  */\r\n  getMiddleAngle: (startAngle, endAngle) => {\r\n    startAngle = Math.round(startAngle);\r\n    endAngle = Math.round(endAngle);\r\n\r\n    let bearingdiff = this.getBearingDiff(startAngle, endAngle);\r\n\r\n    if (this.addHeading(startAngle, bearingdiff) == endAngle) {\r\n      return this.addHeading(startAngle, bearingdiff / 2);\r\n    } else {\r\n      return this.addHeading(startAngle, (bearingdiff * -1) / 2);\r\n    }\r\n  },\r\n};\r\n","/**\r\n    getDistanceCos\r\n\r\n    Calculate distance between two points in km.  This method generates more accurate distance for points close together\r\n    like within a tunr or on a race course\r\n\r\n    @param {object} from - GPS position\r\n      @property {number} lat\r\n      @property {number} lon\r\n    @param {object} to - GPS position\r\n      @property {number} lat\r\n      @property {number} lon\r\n    @return {Number} - km [default]\r\n\r\n  */\r\nconst getDistanceCos = (from, to, radius) => {\r\n  let R = radius || geo_const.MEAN_RADIUS_IN_M / 1000; //default to earth radius in km\r\n\r\n  let d =\r\n    Math.acos(\r\n      Math.sin((from.lat * Math.PI) / 180) *\r\n        Math.sin((to.lat * Math.PI) / 180) +\r\n        Math.cos((from.lat * Math.PI) / 180) *\r\n          Math.cos((to.lat * Math.PI) / 180) *\r\n          Math.cos(((to.lon - from.lon) * Math.PI) / 180)\r\n    ) * R;\r\n  return d;\r\n};\r\n\r\n/**\r\n    getDistanceHaversine\r\n\r\n    Calculate distance between two points.  This method generates more accurate distance for points farther apart\r\n    and incorporates the curve of the earth as part of the equation\r\n\r\n    @param {object} from - GPS position\r\n      @property {number} lat\r\n      @property {number} lon\r\n    @param {object} to - GPS position\r\n      @property {number} lat\r\n      @property {number} lon\r\n    @return {Number}\r\n\r\n  */\r\nconst getDistanceHaversine = (from, to) => {\r\n  let R = geo_const.MEAN_RADIUS_IN_M / 1000; // earth's mean radius in km\r\n  let dLat = ((to.lat - from.lat) * Math.PI) / 180;\r\n  let dLon = ((to.lon - from.lon) * Math.PI) / 180;\r\n  from.lat = (from.lat * Math.PI) / 180;\r\n  to.lat = (to.lat * Math.PI) / 180;\r\n\r\n  let a =\r\n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n    Math.cos(from.lat) *\r\n      Math.cos(to.lat) *\r\n      Math.sin(dLon / 2) *\r\n      Math.sin(dLon / 2);\r\n  let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n  let d = R * c;\r\n  return d;\r\n};\r\n\r\n/**\r\n * getDistanceFromSpeedTime\r\n *\r\n * Calculate distance from speed (in kM/hour) and Time (seconds)\r\n *\r\n * @param {number} speed - speed in kM/hr\r\n * @param {number} time - time in Seconds\r\n * @return {object}\r\n *      @property {number} distInDegree\r\n *      @property {number} distInFeet\r\n *      @property {number} distInKilometers\r\n *\r\n * */\r\n\r\nconst getDistanceFromSpeedTime = (speed, time) => {\r\n  return {\r\n    distInDegree: (speed * (time / geo_const.HOUR)) / geo_const.KM_IN_DEG,\r\n    distInFeet: speed * (time / geo_const.HOUR) * geo_const.KM_TO_FEET,\r\n    distInKilometers: speed * (time / geo_const.HOUR),\r\n    distInNM: speed * (time / geo_const.HOUR) * geo_const.KM_TO_NM,\r\n  };\r\n};\r\n\r\n/**\r\n   * Returns (signed) distance from ‘this’ point to great circle defined by start-point and end-point.\r\n   *\r\n   * @param   {object} lineStart - Start point of great circle path.\r\n       @param {number} lat\r\n       @param {number} lon\r\n   * @param   {object} lineEnd - End point of great circle path.\r\n       @param {number} lat\r\n       @param {number} lon\r\n     @param   {object} currentPoint -current location\r\n         @param {number} lat\r\n         @param {number} lon\r\n   * @param   {bool} haversine - use haversine versus cosine calculation.  Cos is best for smalelr distances \r\n   * @returns {number} Distance to great circle (-ve if to left, +ve if to right of path).\r\n   *    *    \r\n   */\r\nfunction crossTrackDistanceTo({\r\n  lineStart,\r\n  lineEnd,\r\n  currentPoint,\r\n  haversine = false,\r\n}) {\r\n  let lineLength = haversine\r\n    ? this.getDistanceHaversine(\r\n        lineStart,\r\n        currentPoint,\r\n        geo_const.MEAN_RADIUS_IN_M\r\n      ) / geo_const.MEAN_RADIUS_IN_M\r\n    : this.getDistanceCos(lineStart, currentPoint, geo_const.MEAN_RADIUS_IN_M) /\r\n      geo_const.MEAN_RADIUS_IN_M;\r\n\r\n  let startToCurrent =\r\n    this.getBearingBetweenTwoPoints(lineStart, currentPoint) * (Math.PI / 180);\r\n\r\n  let startLineBearing =\r\n    this.getBearingBetweenTwoPoints(lineStart, lineEnd) * (Math.PI / 180);\r\n\r\n  let XTE = Math.asin(\r\n    Math.sin(lineLength) * Math.sin(startToCurrent - startLineBearing)\r\n  );\r\n\r\n  return XTE * geo_const.MEAN_RADIUS_IN_M;\r\n}\r\n\r\nmodule.exports = {\r\n  getDistanceCos,\r\n  getDistanceHaversine,\r\n  getDistanceFromSpeedTime,\r\n  crossTrackDistanceTo,\r\n};\r\n","const parseDMS = require(\"./parseDMS/index\");\nconst {\n  getAvgOfBearings,\n  getBearingBetweenTwoPoints,\n  getBearingDiff,\n  addHeading,\n  invertHDG,\n  findMiddleAngle,\n} = require(\"./bearings\");\nconst {\n  getBoundsOfData,\n  getMinMaxAvgFromArray,\n} = require(\"./utils/arrayUtils\");\nconst {\n  getDistanceCos,\n  getDistanceHaversine,\n  getDistanceFromSpeedTime,\n  crossTrackDistanceTo,\n} = require(\"./distance\");\nconst {\n  getIntersectionPoint,\n  getDestinationPoint,\n  mercator,\n} = require(\"./position\");\nconst { humanTime } = require(\"./utils/time\");\nconst { GDP_smoother } = require(\"./utils/smoothing\");\n\nmodule.exports = (() => {\n  return {\n    getAvgOfBearings,\n    getBearingBetweenTwoPoints,\n    getBearingDiff,\n    addHeading,\n    invertHDG,\n    findMiddleAngle,\n    parseDMS,\n    getBoundsOfData,\n    getMinMaxAvgFromArray,\n    getDistanceCos,\n    getDistanceHaversine,\n    getDistanceFromSpeedTime,\n    crossTrackDistanceTo,\n    getIntersectionPoint,\n    getDestinationPoint,\n    mercator,\n    humanTime,\n    GDP_smoother,\n  };\n})();\n","const validateDMSstring = require(\"./validateDMSString\");\r\nconst processDMSstring = require(\"./processDMSstring\");\r\n\r\nconst processDMS = (position, options) => {\r\n  try {\r\n    //Check for any illegal characters\r\n    if (/[^0-9.,NSEW\\-\\s\\u00B0\\'\\\"]/i.test(position))\r\n      throw \"Malformed Position Data\";\r\n\r\n    //Check position is already a decimal and less than max longitude\r\n    if (\r\n      !isNaN(parseFloat(position)) &&\r\n      isFinite(position) &&\r\n      Math.abs(position)\r\n    ) {\r\n      if (Math.abs(position) > 180) throw \"Position Out of Bounds\";\r\n      return Number(position);\r\n    }\r\n\r\n    let deg,\r\n      dms = position\r\n        .replace(/^-/, \"\")\r\n        .replace(/[NSEW]/i, \"\") // strip off any sign or compass dir'n\r\n        .split(/[^0-9.,]+/); // split out separate d/m/s\r\n\r\n    //If find '' anywhere but at end of array then malformed data exists so throw error\r\n    dms.forEach((e, i) => {\r\n      if (e == \"\") {\r\n        if (i < dms.length - 1) {\r\n          throw \"Malformed Position Data\";\r\n        }\r\n        dms.splice(i, 1);\r\n      }\r\n    });\r\n\r\n    validateDMSstring(position, dms);\r\n    deg = processDMSstring(dms);\r\n\r\n    if (/^-/.test(position) || /[WS]/i.test(position)) deg = -deg; // take '-', west and south as -ve\r\n    return deg.toFixedNumber(7);\r\n  } catch (err) {\r\n    if (options.continueOnError) return { error: err };\r\n    throw err;\r\n  }\r\n};\r\n\r\nmodule.exports = processDMS;\r\n","const processDMSstring = (dms) => {\r\n  let deg;\r\n  switch (\r\n    dms.length // convert to decimal degrees...\r\n  ) {\r\n    case 3: // interpret 3-part result as d/m/s\r\n      deg = dms[0] / 1 + dms[1] / 60 + dms[2] / 3600;\r\n      break;\r\n    case 2: // interpret 2-part result as d/m\r\n      deg = dms[0] / 1 + dms[1] / 60;\r\n      break;\r\n    case 1: // decimal or non-separated dddmmss\r\n      deg =\r\n        dms[0].slice(0, 3) / 1 +\r\n        dms[0].slice(3, 5) / 60 +\r\n        dms[0].slice(5) / 3600;\r\n      break;\r\n    default:\r\n      throw \"Malformed Position Data\";\r\n  }\r\n\r\n  return deg;\r\n};\r\n\r\nmodule.exports = processDMSstring;\r\n","const isValidGeoObject = (point) => {\r\n  return point.hasOwnProperty(\"lat\") && point.hasOwnProperty(\"lon\")\r\n    ? true\r\n    : false;\r\n};\r\n\r\nconst processPointObject = (data, options, func) => {\r\n  console.log(\"process obj\", data, options, func);\r\n  if (isValidGeoObject) {\r\n    const lat =\r\n      Math.abs(parseFloat(data.lat)) > 90\r\n        ? {\r\n            error: \"Latitude out of bounds\",\r\n          }\r\n        : func(data.lat, options);\r\n    const lon =\r\n      Math.abs(parseFloat(data.lon)) > 180\r\n        ? {\r\n            error: \"Longitude out of bounds\",\r\n          }\r\n        : func(data.lon, options);\r\n\r\n    if (!options.continueOnError) {\r\n      console.log(\"this\", lat, lon);\r\n      if (lat.error) throw lat.error;\r\n      if (lon.error) throw lon.error;\r\n    }\r\n    return options.flatten ? [lat, lon] : { lat, lon };\r\n  } else {\r\n    return options.flatten\r\n      ? Object.keys(data).map((item) => func(data[item], options))\r\n      : Object.keys(data).reduce((obj, item) => {\r\n          obj[item] = func(data[item], options);\r\n          return obj;\r\n        }, {});\r\n  }\r\n};\r\n\r\nmodule.exports = processPointObject;\r\n","/**\r\n * validateDMSstring\r\n *\r\n * Checks parsed DMS array for any element out of bounds.  Uses regex\r\n * on original string to look for NS to see if item is Lat or Lon\r\n *\r\n * @param {string} dmsString - Original string position\r\n * @param {array} dmsArray - Array of parsed string into elements [Degrees, Minutes, Seconds]\r\n *  @return {null | Error } returns error if item out of bounds or malformed\r\n */\r\nconst validateDMSstring = (dmsString, dmsArray) => {\r\n  //check deg boundaries\r\n  if (Math.abs(dmsArray[0]) > 180) throw \"DMS degrees out of bounds\";\r\n\r\n  if (/[NS]/i.test(dmsString) && Math.abs(dmsArray[0]) > 90)\r\n    throw \"DMS degrees out of bounds\";\r\n\r\n  switch (\r\n    dmsArray.length // convert to decimal degrees...\r\n  ) {\r\n    case 3: // interpret 3-part result as d/m/s\r\n      if (dmsArray[1] > 60) throw \"DMS minutes out of bounds\";\r\n\r\n      if (dmsArray[2] > 60) throw \"DMS seconds out of bounds\";\r\n\r\n    case 2: // interpret 2-part result as d/m\r\n      if (dmsArray[1] > 60) throw \"DMS minutes out of bounds\";\r\n\r\n    default:\r\n      return;\r\n  }\r\n};\r\n\r\nmodule.exports = validateDMSstring;\r\n","/**\r\n * parseDMS\r\n *\r\n * Versitle parsing of human readable GPS data into decimal format.  Handles a wide\r\n * variety of data entry to allow users flexibility in doing data entry.\r\n *\r\n * It can also handle deeply nested diverse data formats and return the information formated\r\n * into existing structure or flattened.\r\n *\r\n * Options include ability to throw error when malformed data encountered to enable use as a validation\r\n * on forms or to return all malfored data in seperate array to allow parsing of large data sets.\r\n *\r\n * Adapted and built from Chris Veness original script\r\n *  * http://www.movable-type.co.uk/scripts/latlong.htmlarses\r\n *\r\n *\r\n */\r\n\r\nconst processPointObject = require(\"./components/processPointObject\");\r\nconst processDMS = require(\"./components/processDMS\");\r\n\r\nrequire(\"../utils/prototypes\");\r\n\r\n/**\r\n *  parseDMS - main parsing function\r\n * @param {String | Array | Object} data\r\n *  @param {String | Number} data.lat\r\n *  @param {String | Number} data.lon\r\n *`@param {Object} [options] -    option flags for processing data\r\n *  @param {bool} [strict=true] - Disallow any chars not part of normal DMS\r\n *  @param {bool} [flatten=false] - Keep input strcture or flatten to single array\r\n *  @param {bool} [returnMalformed=false] - Return second array of malformed items and their original indeox\r\n *  @param {bool} [keepError=false] - Keep malformed elements inSitu otherwise shows error.\r\n *  @param {bool} [continueOnError=false] - throw error if malformed data based on strict options settings is found\r\n *                                          if set to true then return error object in istu:  {\"Error\": err title}\r\n *\r\n */\r\n\r\nconst parseDMS = (data, options = {}) => {\r\n  if (data == null) return null;\r\n  //Check if string\r\n  if (typeof data === \"string\" || typeof data === \"number\")\r\n    return processDMS(data, options);\r\n\r\n  //Check if Array and recursively process\r\n  if (Array.isArray(data))\r\n    return options.flatten\r\n      ? data.reduce((a, c) => a.concat(parseDMS(c, options)), [])\r\n      : data.map((item) => parseDMS(item, options));\r\n\r\n  //Check if object with lat lon\r\n  if (typeof data === \"object\") {\r\n    return processPointObject(data, options, parseDMS);\r\n  }\r\n\r\n  throw {\r\n    error: \"Malformed Position Data\",\r\n    message: \"Malformed Data\",\r\n  };\r\n};\r\n\r\nmodule.exports = parseDMS;\r\n","require(\"./utils/prototypes\");\r\nconst geo_const = require(\"./utils/const\");\r\nconst surface = require(\"./surface\");\r\nconst measurement = require(\"./utils/measurement\");\r\nconst formatPoint = require(\"./utils/formatPoint\");\r\nconst { pipe } = require(\"./utils/compose\");\r\n\r\n/**\r\n * getPositionFromBearingAndDistance\r\n *\r\n * Use origin point, bearing and distance moved to calculate new position\r\n * @param {object} point - origin point\r\n *  @param {number} point.lat\r\n *  @param {number} point.lon\r\n * @param {number} distance - distance travelled\r\n * @param {number} bearing - direction travelled\r\n *\r\n * @return {object}\r\n *  @param {number} lat\r\n *  @param {number} lon\r\n */\r\nconst getDestinationPoint = ({\r\n  point,\r\n  bearing,\r\n  surfaceType = \"spherical\",\r\n  formatType = \"DMS\",\r\n  ...rest\r\n}) => {\r\n  //Composition approach\r\n  const process = pipe(\r\n    measurement, //get measurment unit user choose and apply values\r\n    surface(surfaceType).getDestinationPoint, //apply chosen surface type formula\r\n    formatPoint(formatType) //apply chosen format\r\n  );\r\n\r\n  return process({\r\n    point: {\r\n      lat: point.lat.toRad(),\r\n      lon: point.lon.toRad(),\r\n    },\r\n    bearing: Number(bearing).toRad(),\r\n    ...rest,\r\n  });\r\n};\r\n\r\n/**\r\n    getIntersectionPoint\r\n\r\n    Calculate intersection point between two lines/routes in lat and lon.  They are not required to overlap to calculate\r\n   \r\n      @property {object} lineA\r\n        @property {number} lat\r\n        @property {number} lon\r\n\r\n      @property {object} lineB\r\n        @property {number} lat\r\n        @property {number} lon\r\n\r\n\r\n    @return {object}\r\n      @property {number} lat\r\n      @property {number} lon\r\n\r\n  */\r\nconst getIntersectionPoint = ({ lineA, lineB }) => {\r\n  let XAsum = lineA.start.lon - lineA.end.lon;\r\n  let XBsum = lineB.start.lon - lineB.end.lon;\r\n  let YAsum = lineA.start.lat - lineA.end.lat;\r\n  let YBsum = lineB.start.lat - lineB.end.lat;\r\n\r\n  let lineDenominator = XAsum * YBsum - YAsum * XBsum;\r\n  if (lineDenominator == 0.0) return false;\r\n\r\n  let a =\r\n    lineA.start.lon * lineA.end.lat - arrs.lineA.start.lat * lineA.end.lon;\r\n  let b = lineB.start.lon * lineB.end.lat - lineB.start.lat * lineB.end.lon;\r\n\r\n  let lat = (a * YBsum - b * YAsum) / lineDenominator;\r\n  let lon = (a * XBsum - b * XAsum) / lineDenominator;\r\n\r\n  return { lat, lon };\r\n};\r\n\r\n/**\r\n * Convert lat/lon to mercator projection points\r\n */\r\nconst mercator = ({ latitude, longitude }) => {\r\n  const MAX = 85.0511287798;\r\n  const RADIANS = Math.PI / 180;\r\n  let point = {};\r\n\r\n  point.lon = geo_const.RADIUS_IN_M * longitude * RADIANS;\r\n  point.lat = Math.max(Math.min(MAX, latitude), -MAX) * RADIANS;\r\n  point.lat =\r\n    geo_const.RADIUS_IN_M * Math.log(Math.tan(Math.PI / 4 + point.lat / 2));\r\n\r\n  return point;\r\n};\r\n\r\nmodule.exports = {\r\n  getIntersectionPoint,\r\n  getDestinationPoint,\r\n\r\n  mercator,\r\n};\r\n","const spherical = require(\"./surface_spherical\");\r\nconst ellipsoidal = require(\"./surface_ellipsoidal\");\r\nconst vicenty = require(\"./surface_vicenty\");\r\n\r\nmodule.exports = (surfaceType) => {\r\n  switch (surfaceType) {\r\n    case \"vicenty\":\r\n      return vicenty;\r\n    case \"ellipsoidal\":\r\n      return ellipsoidal;\r\n    default:\r\n      return spherical;\r\n  }\r\n};\r\n","require(\"../utils/prototypes\");\r\n/**\r\n * Formula for calculations using simple trigonometry to calculate based on spherical surface model\r\n *\r\n */\r\n\r\n/** getDestinationPoint\r\n * Spherical formula for calulating destination point based on distance and bearing.\r\n * All inputs in radians\r\n * @param {object} point - origin point\r\n * @param {number} distance - distance/ radius from previous function in composition\r\n * @param {number} bearing - direction traveled in radians\r\n * */\r\nconst getDestinationPoint = ({ point, distance, bearing }) => {\r\n  const lat1 = point.lat,\r\n    lon1 = point.lon;\r\n\r\n  return {\r\n    lat: Math.asin(\r\n      Math.sin(lat1) * Math.cos(distance) +\r\n        Math.cos(lat1) * Math.sin(distance) * Math.cos(bearing)\r\n    ).toDeg(),\r\n    lon: (\r\n      lon1 +\r\n      Math.atan2(\r\n        Math.sin(bearing) * Math.sin(distance) * Math.cos(lat1),\r\n        Math.cos(distance) -\r\n          Math.sin(lat1) * Math.sin(lat1) * Math.cos(distance) +\r\n          Math.cos(lat1) * Math.sin(distance) * Math.cos(bearing)\r\n      )\r\n    ).toDeg(),\r\n  };\r\n};\r\n\r\nmodule.exports = { getDestinationPoint };\r\n","/**\r\n      Get min, max, avg of a given property from array and filters out non numbers or bad data\r\n\r\n      @param {object} arrs\r\n        @property {array} array - Array of racedata objects to get min,max, avg from\r\n        @property {object} dataSource - propery of racedata object to use as basis for reducing array\r\n\r\n      @returns {object}\r\n        @property {number} max\r\n        @property {number} min\r\n        @property {number} avg\r\n\r\n    */\r\nconst getMinMaxAvgFromArray = (newArray) => {\r\n  //strips out bad data\r\n  let max = newArray.reduce(function (a, b) {\r\n    if (isNaN(a) || a === null || a === \"\") a = -Infinity;\r\n    if (isNaN(b) || b === null || b === \"\") b = -Infinity;\r\n    return Math.max(a, b);\r\n  }, -Infinity);\r\n\r\n  let min = newArray.reduce(function (a, b) {\r\n    if (isNaN(a) || a === null || a === \"\") a = Infinity;\r\n    if (isNaN(b) || b === null || b === \"\") b = Infinity;\r\n    return Math.min(a, b);\r\n  }, Infinity);\r\n\r\n  let avg =\r\n    newArray.reduce(function (previous, current) {\r\n      if (isNaN(current) || current === null || current === \"\") return previous;\r\n      return previous + Number(current);\r\n    }, 0) / newArray.length;\r\n\r\n  return { min, max, avg };\r\n};\r\n\r\n/**\r\n * getBoundsOfData\r\n *\r\n * Takes an array of geoJSON objects and returns a boundary box containeing those values\r\n * @param {array} data array of geoJSON object\r\n * @param {object} geoJSON\r\n * @property {number} lat\r\n * @property {number} lon\r\n *\r\n * @returns {object} Return object has four cornes of bounds of data set\r\n * @property {latMin} latMin\r\n * @property {latMax} latMax\r\n * @property {lonMin}\r\n * @property {lonMax}\r\n */\r\nconst getBoundsOfData = (data) => {\r\n  const boundsObject = data.reduce(\r\n    function (a, c) {\r\n      return {\r\n        latMin: isNaN(a.latMin) || a.latMin > c.lat ? c.lat : a.latMin,\r\n        latMax: isNaN(a.latMax) || a.latMax < c.lat ? c.lat : a.latMax,\r\n        lngMin: isNaN(a.lngMin) || a.lngMin > c.lng ? c.lng : a.lngMin,\r\n        lngMax: isNaN(a.lngMax) || a.lngMax < c.lng ? c.lng : a.lngMax,\r\n      };\r\n    },\r\n    {\r\n      latMin: Infinity,\r\n      latMax: -Infinity,\r\n      lngMin: Infinity,\r\n      lngMax: -Infinity,\r\n    }\r\n  );\r\n};\r\n\r\nmodule.exports = { getMinMaxAvgFromArray, getBoundsOfData };\r\n","/**\r\n * compose\r\n *\r\n * Composition utility to compose multiple functions with arrays of parameters\r\n */\r\n\r\n/*\r\n const compose = (...fns) => (...args) =>\r\n  fns.reduceRight((acc, fn) => [fn(...args)], args);*/\r\n\r\nconst compose = (...fns) => (args) =>\r\n  fns.reduceRight((acc, fn) => fn(acc), args);\r\n\r\nconst pipe = (...fns) => (x) => fns.reduce((v, f) => f(v), x);\r\n\r\nmodule.exports = { compose, pipe };\r\n","module.exports = {\r\n  METER_TO_KM: 0.0001,\r\n  METER_TO_MILE: 0.000621371,\r\n  METER_TO_NM: 1 / 1852,\r\n\r\n  KM_TO_NM: 0.539957,\r\n  NM_TO_KM: 1.852,\r\n  HOUR: 3600,\r\n  KM_IN_DEG: 111.12,\r\n  NM_IN_DEG: 60,\r\n  NM_TO_FEET: 6076,\r\n  KM_TO_FEET: 3280.84,\r\n  RADIUS_IN_M: 6378137, //radius earth at equator in meters\r\n  MEAN_RADIUS_IN_M: 6371e3, //earth mean radius\r\n};\r\n","const formatPoint = (formatType) => {\r\n  switch (formatType) {\r\n    case \"DMS\":\r\n      return (point) => {\r\n        console.log(\"trigger\", point);\r\n        return {\r\n          lat: point.lat.toDMSLat(),\r\n          lon: point.lon.toDMSLon(),\r\n        };\r\n      };\r\n    case \"Cardinal\":\r\n      return (point) => ({\r\n        lat: point.lat.toFixedNumber(4).toDLat(),\r\n        lon: point.lon.toFixedNumber(4).toDLon(),\r\n      });\r\n    case \"Decimal\":\r\n      return (point) => ({\r\n        lat: point.lat.toFixedNumber(4),\r\n        lon: point.lon.toFixedNumber(4),\r\n      });\r\n  }\r\n};\r\n\r\nmodule.exports = formatPoint;\r\n","const geo_const = require(\"./const\");\r\n\r\nconst measurement = ({ distance, ...rest }) => {\r\n  let divisor;\r\n\r\n  switch (true) {\r\n    case /(NM)/i.test(distance): //nautical miles\r\n      divisor = geo_const.MEAN_RADIUS_IN_M * geo_const.METER_TO_NM;\r\n      break;\r\n\r\n    case /(KM)/i.test(distance): //Kilometers\r\n      divisor = geo_const.MEAN_RADIUS_IN_M * geo_const.METER_TO_KM;\r\n      break;\r\n\r\n    case /(M)/.test(distance): //Miles\r\n      divisor = geo_const.MEAN_RADIUS_IN_M * geo_const.METER_TO_MILE;\r\n      break;\r\n\r\n    case /(m)/.test(distance): //meters\r\n      divisor = geo_const.MEAN_RADIUS_IN_M;\r\n      break;\r\n\r\n    default:\r\n      throw \"No Measurement found\";\r\n  }\r\n\r\n  distance = parseFloat(distance) / divisor;\r\n\r\n  return { distance, ...rest };\r\n};\r\n\r\nmodule.exports = measurement;\r\n","const parseDMS = require(\"../parseDMS\");\r\nconst geo_const = require(\"./const\");\r\n\r\nNumber.prototype.toFixedNumber = function (digits, base) {\r\n  var pow = Math.pow(base || 10, digits);\r\n  return Math.round(this * pow) / pow;\r\n};\r\n\r\n// convert degrees to radians\r\nNumber.prototype.toRad = function () {\r\n  return (this * Math.PI) / 180;\r\n};\r\n\r\n// convert radians to degrees (signed)\r\nNumber.prototype.toDeg = function () {\r\n  return (this * 180) / Math.PI;\r\n};\r\n\r\n// convert radians to degrees (as bearing: 0...359)\r\nNumber.prototype.toBNG = function () {\r\n  return (this.toDeg() + 360) % 360;\r\n};\r\n\r\n// convert numeric degrees to human readable deg/min/sec - i.e. 41.34445 = 041°20'40\"\r\nNumber.prototype.toDMS = function () {\r\n  let decimal = Math.abs(this);\r\n  decimal += 1 / 7200; // add to second for rounding\r\n  let deg = Math.floor(decimal);\r\n  let min = Math.floor((decimal - deg) * 60);\r\n  let sec = Number(((decimal - deg - min / 60) * 3600).toFixed(2));\r\n\r\n  // add leading zeros if required\r\n  if (deg < 100) deg = \"0\" + deg;\r\n  if (deg < 10) deg = \"0\" + deg;\r\n  if (min < 10) min = \"0\" + min;\r\n  if (sec < 10) sec = \"0\" + sec;\r\n  return `${deg}\\u00B0${min}\\u0027${sec}\\u0022`;\r\n};\r\n\r\nNumber.prototype.toDMSLat = function () {\r\n  // convert numeric degrees to deg/min/sec latitude\r\n  return this.toDMS().slice(1) + (this > 0 ? \"N\" : \"S\"); // knock off initial '0' for lat\r\n};\r\n\r\nNumber.prototype.toDMSLon = function () {\r\n  // convert numeric degrees to deg/min/sec longitude\r\n  return this.toDMS() + (this > 0 ? \"E\" : \"W\");\r\n};\r\n\r\nNumber.prototype.toDLat = function () {\r\n  // convert numeric degrees to deg/min/sec latitude\r\n  return `${Math.abs(this)}\\u00B0${this > 0 ? \"N\" : \"S\"}`;\r\n};\r\n\r\nNumber.prototype.toDLon = function () {\r\n  // convert numeric degrees to deg/min/sec longitude\r\n  return `${Math.abs(this)}\\u00B0${this > 0 ? \"E\" : \"W\"}`;\r\n};\r\n\r\nNumber.prototype.metersToKm = function () {\r\n  return this * geo_const.METER_TO_KM;\r\n};\r\n\r\nNumber.prototype.metersToMile = function () {\r\n  return this * geo_const.METER_TO_MILE;\r\n};\r\n\r\nNumber.prototype.metersToNm = function () {\r\n  return this * geo_const.METER_TO_NM;\r\n};\r\n\r\n/**\r\n * Parses human readable DMS string into Decimal format\r\n *\r\n * See: /validation/parseDMS for attribution nad info *\r\n */\r\n\r\nString.prototype.parseDMS = function () {\r\n  return parseDMS(this);\r\n};\r\n","/**\r\n  GDouglasPeucker\r\n  Stack-based Douglas Peucker line simplification routine\r\n   returned is a reduced google.maps.LatLng array\r\n   After code by  Dr. Gary J. Robinson,\r\n   Environmental Systems Science Centre,\r\n   University of Reading, Reading, UK\r\n\r\n   @param {array} source Input coordinates\r\n   @param {number} kink in metres, kinks above this depth kept.  Kink depth is the height of the triangle abc where a-b and b-c are two consecutive line segments\r\n\r\n*/\r\n\r\nfunction GDP_smoother(source, kink) {\r\n  let n_source, n_stack, n_dest, start, end, i, sig;\r\n  let dev_sqr, max_dev_sqr, band_sqr;\r\n  let x12, y12, d12, x13, y13, d13, x23, y23, d23;\r\n  let F = (Math.PI / 180.0) * 0.5;\r\n  let index = new Array(); /* aray of indexes of source points to include in the reduced line */\r\n  let sig_start = new Array(); /* indices of start & end of working section */\r\n  let sig_end = new Array();\r\n\r\n  /* check for simple cases */\r\n\r\n  if (source.length < 3) return source; /* one or two points */\r\n\r\n  /* more complex case. initialize stack */\r\n\r\n  n_source = source.length;\r\n  band_sqr = (kink * 360.0) / (2.0 * Math.PI * 6378137.0); /* Now in degrees */\r\n  band_sqr *= band_sqr;\r\n  n_dest = 0;\r\n  sig_start[0] = 0;\r\n  sig_end[0] = n_source - 1;\r\n  n_stack = 1;\r\n\r\n  /* while the stack is not empty  ... */\r\n  while (n_stack > 0) {\r\n    /* ... pop the top-most entries off the stacks */\r\n\r\n    start = sig_start[n_stack - 1];\r\n    end = sig_end[n_stack - 1];\r\n    n_stack--;\r\n\r\n    if (end - start > 1) {\r\n      /* any intermediate points ? */\r\n\r\n      /* ... yes, so find most deviant intermediate point to\r\n                     either side of line joining start & end points */\r\n\r\n      x12 = source[end].lon - source[start].lon;\r\n      y12 = source[end].lat - source[start].lat;\r\n      if (Math.abs(x12) > 180.0) x12 = 360.0 - Math.abs(x12);\r\n      x12 *= Math.cos(\r\n        F * (source[end].lat + source[start].lat)\r\n      ); /* use avg lat to reduce lon */\r\n      d12 = x12 * x12 + y12 * y12;\r\n\r\n      for (i = start + 1, sig = start, max_dev_sqr = -1.0; i < end; i++) {\r\n        x13 = source[i].lon - source[start].lon;\r\n        y13 = source[i].lat - source[start].lat;\r\n        if (Math.abs(x13) > 180.0) x13 = 360.0 - Math.abs(x13);\r\n        x13 *= Math.cos(F * (source[i].lat + source[start].lat));\r\n        d13 = x13 * x13 + y13 * y13;\r\n\r\n        x23 = source[i].lon - source[end].lon;\r\n        y23 = source[i].lat - source[end].lat;\r\n        if (Math.abs(x23) > 180.0) x23 = 360.0 - Math.abs(x23);\r\n        x23 *= Math.cos(F * (source[i].lat + source[end].lat));\r\n        d23 = x23 * x23 + y23 * y23;\r\n\r\n        if (d13 >= d12 + d23) dev_sqr = d23;\r\n        else if (d23 >= d12 + d13) dev_sqr = d13;\r\n        else\r\n          dev_sqr = ((x13 * y12 - y13 * x12) * (x13 * y12 - y13 * x12)) / d12; // solve triangle\r\n\r\n        if (dev_sqr > max_dev_sqr) {\r\n          sig = i;\r\n          max_dev_sqr = dev_sqr;\r\n        }\r\n      }\r\n\r\n      if (max_dev_sqr < band_sqr) {\r\n        /* is there a sig. intermediate point ? */\r\n        /* ... no, so transfer current start point */\r\n        index[n_dest] = start;\r\n        n_dest++;\r\n      } else {\r\n        /* ... yes, so push two sub-sections on stack for further processing */\r\n        n_stack++;\r\n        sig_start[n_stack - 1] = sig;\r\n        sig_end[n_stack - 1] = end;\r\n        n_stack++;\r\n        sig_start[n_stack - 1] = start;\r\n        sig_end[n_stack - 1] = sig;\r\n      }\r\n    } else {\r\n      /* ... no intermediate points, so transfer current start point */\r\n      index[n_dest] = start;\r\n      n_dest++;\r\n    }\r\n  }\r\n\r\n  /* transfer last point */\r\n  index[n_dest] = n_source - 1;\r\n  n_dest++;\r\n\r\n  /* make return array */\r\n  let r = new Array();\r\n  for (let i = 0; i < n_dest; i++) r.push(source[index[i]]);\r\n\r\n  return r;\r\n}\r\n\r\nmodule.exports = { GDP_smoother };\r\n","/**\r\n * humanTime\r\n *\r\n * Produce human readable time from milliseconds.  Automatically hide/add mins secs days etc\r\n *\r\n */\r\nconst humanTime = (millisec) => {\r\n  let seconds = (millisec / 1000).toFixed(0);\r\n  let minutes = Math.floor(seconds / 60);\r\n  let hours = \"\";\r\n  if (minutes > 59) {\r\n    hours = Math.floor(minutes / 60);\r\n    hours = hours >= 10 ? hours : \"0\" + hours;\r\n    minutes = minutes - hours * 60;\r\n    minutes = minutes >= 10 ? minutes : \"0\" + minutes;\r\n  }\r\n\r\n  seconds = Math.floor(seconds % 60);\r\n  seconds = seconds >= 10 ? seconds : \"0\" + seconds;\r\n  if (hours != \"\") {\r\n    return hours + \":\" + minutes + \":\" + seconds;\r\n  }\r\n  return minutes + \":\" + seconds;\r\n};\r\n\r\nmodule.exports = { humanTime };\r\n"],"sourceRoot":""}